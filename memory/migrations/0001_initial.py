# Generated by Django 4.2.14 on 2024-08-06 09:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_name', models.CharField(max_length=30)),
                ('user_id', models.CharField(max_length=20, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('lst_cmn_qst_no', models.IntegerField(default=0)),
                ('liked_cmn_qst_no', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('liked_psn_qst_no', models.CharField(blank=True, default='', max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CommonQuestion',
            fields=[
                ('cmn_qst_no', models.AutoField(primary_key=True, serialize=False)),
                ('cmn_qst_txt', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('family_id', models.AutoField(primary_key=True, serialize=False)),
                ('tree_exp', models.IntegerField(default=0)),
                ('tree_skin', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('tree_start_date', models.DateField(default=django.utils.timezone.now)),
                ('item_list', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('wrt_strg', models.IntegerField(default=0)),
                ('cmn_qst_no', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='memory.commonquestion')),
            ],
        ),
        migrations.CreateModel(
            name='Feed',
            fields=[
                ('feed_id', models.AutoField(primary_key=True, serialize=False)),
                ('feed_img', models.ImageField(blank=True, upload_to='feeds/')),
                ('feed_txt', models.TextField()),
                ('feed_rgst_dt', models.DateField()),
                ('family', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='memory.family')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ShopItem',
            fields=[
                ('item_id', models.AutoField(primary_key=True, serialize=False)),
                ('item_name', models.CharField(max_length=50)),
                ('item_price', models.IntegerField()),
                ('item_photo', models.ImageField(blank=True, upload_to='shop_items/')),
                ('item_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='PersonalQuestion',
            fields=[
                ('prsn_qst_no', models.AutoField(primary_key=True, serialize=False)),
                ('prsn_qst_txt', models.TextField()),
                ('family', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='memory.family')),
            ],
        ),
        migrations.CreateModel(
            name='PersonalComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rgst_time', models.DateTimeField(auto_now_add=True)),
                ('cmt_txt', models.TextField()),
                ('prsn_qst', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='memory.personalquestion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PersonalAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rgst_time', models.DateTimeField(auto_now_add=True)),
                ('ans_txt', models.TextField()),
                ('prsn_qst', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='memory.personalquestion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Memory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tree_start_dt', models.DateField()),
                ('tree_end_dt', models.DateField()),
                ('first_feed_id', models.IntegerField(blank=True, null=True)),
                ('second_feed_id', models.IntegerField(blank=True, null=True)),
                ('third_feed_id', models.IntegerField(blank=True, null=True)),
                ('tree_skin', models.CharField(max_length=100)),
                ('family', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='memory.family')),
            ],
        ),
        migrations.CreateModel(
            name='FeedComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rgst_time', models.DateTimeField()),
                ('cmt_txt', models.TextField(default='')),
                ('feed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='memory.feed')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='family',
            name='first_feed',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='first_feed', to='memory.feed'),
        ),
        migrations.AddField(
            model_name='family',
            name='second_feed',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='second_feed', to='memory.feed'),
        ),
        migrations.AddField(
            model_name='family',
            name='third_feed',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='third_feed', to='memory.feed'),
        ),
        migrations.CreateModel(
            name='CommonComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rgst_time', models.DateTimeField(auto_now_add=True)),
                ('cmt_txt', models.TextField()),
                ('cmn_qst', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='memory.commonquestion')),
                ('family', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='memory.family')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CommonAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rgst_time', models.DateTimeField(auto_now_add=True)),
                ('ans_txt', models.TextField()),
                ('cmn_qst', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='memory.commonquestion')),
                ('family', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='memory.family')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='family',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='memory.family'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
